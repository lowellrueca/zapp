<div class="_carousel__116qAS3F">
    <div class="_carousel-item__1HhnsgHa _carousel-item-slide__1dM04oP2">
        @foreach (var item in SlideColors)
        {
            <a href="#" class="_carousel-img__79vTgMsL"
            style="transform: translateX(@CarouselCurrentTranslate); background-color: @item.Value">
                <p class="_carousel-text__1EDRiGP5">
                    slider-@($"{item.Key + 1}")
                </p>
            </a>
        }
    </div>
    <div @onclick="SetPreviousSlide"
        class="_carousel-item__1HhnsgHa _carousel-item-chevron__1BL4wSFN _carousel-item-left__1CGkioYy">
        <i class="oi oi-chevron-left"></i>
    </div>
    <div @onclick="SetNextSlide"
        class="_carousel-item__1HhnsgHa _carousel-item-chevron__1BL4wSFN _carousel-item-right__EfefEmzr">
        <i class="oi oi-chevron-right"></i>
    </div>
    <div class="_carousel-item__1HhnsgHa _carousel-item-bottom__24bzXANO">
        @foreach (var item in SlideColors)
        {
            <div class="_carousel-dot__zsW7LztF" data-dot-active="@SetActiveDot(item.Key)"
            @onclick="() => SetActiveDotOnClick(item.Key)">
                <i class="oi oi-media-record"></i>
            </div>
        }
    </div>
</div>

@code
{
    private Dictionary<int, string> SlideColors = new Dictionary<int, string>() {
{0, "#cc9a59"},
{1, "#358286"},
{2, "#81aedd"},
{3, "#9dcc59"},
{4, "#d02a2a"},
};

    int CarouselCurrentIndex { get; set; }
    int CarouselCurrentOffset { get; set; }
    string CarouselCurrentTranslate { get; set; }

    int offset = 100;

    protected override void OnInitialized()
    {
        CarouselCurrentIndex = SlideColors.Keys.First();
        CarouselCurrentOffset = 0;
    }

    private void SetNextSlide()
    {
        int lastKey = SlideColors.Keys.Last();

        if (CarouselCurrentIndex == lastKey)
        {
            CarouselCurrentIndex = lastKey;
            CarouselCurrentOffset = CarouselCurrentIndex * offset;
        }
        else
        {
            CarouselCurrentIndex++;
            CarouselCurrentOffset = CarouselCurrentIndex * offset;
            CarouselCurrentTranslate = $"-{CarouselCurrentOffset}%";
        }
    }

    private void SetPreviousSlide()
    {
        int firstKey = SlideColors.Keys.First();

        if (CarouselCurrentIndex == firstKey)
        {
            CarouselCurrentIndex = firstKey;
            CarouselCurrentOffset = CarouselCurrentIndex * offset;
        }
        else
        {
            CarouselCurrentIndex--;
            CarouselCurrentOffset = CarouselCurrentIndex * offset;
            CarouselCurrentTranslate = $"-{CarouselCurrentOffset}%";
        }
    }

    private void SetActiveDotOnClick(int itemKey)
    {
        CarouselCurrentIndex = itemKey;
        CarouselCurrentOffset = CarouselCurrentIndex * offset;
        CarouselCurrentTranslate = $"-{CarouselCurrentOffset}%";
    }

    private string SetActiveDot(int itemKey)
    {
        bool res = CarouselCurrentIndex.Equals(itemKey) ? true : false;
        return res.ToString().ToLower();
    }
}
